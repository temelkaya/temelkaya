{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This cft creates VPC, ALB and ASG",
    "Parameters": {
        "WebServerKey": {
            "Description": "This key will be used to SSH into EC2 instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames" : true,
                "EnableDnsSupport" : false,
                "InstanceTenancy" : "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Orchsky-VPC"
                    }

                ]
            }
        },
        "Public1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.1.0/28",
                "MapPublicIpOnLaunch" : true,
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZ1public"
                    }
                ]
            }
            
        },
        "Public2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.2.0/28",
                "MapPublicIpOnLaunch" : true,
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZ2public"
                    }
                ]
            }
        },
        "Private1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.3.0/28",
                "MapPublicIpOnLaunch" : false,
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppLayer1private"
                    }
                ]
            }
        },
        "Private2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.4.0/28",
                "MapPublicIpOnLaunch" : false,
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppLayer2private"
                    }
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "Orchsky-IGW"
                    }
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "InternetGatewayId" : {"Ref": "InternetGateway"},
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "PublicRT": {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref": "VPC"},
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "Public-RT"
                    }
                ]

            }
        },
        "PublicRTRoute": {
            "Type" : "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties" : {
                "GatewayId" : {"Ref": "InternetGateway"},
                "RouteTableId" : {"Ref": "PublicRT"},
                "DestinationCidrBlock" : "0.0.0.0/0" 
            }
        },
        "PublicRTDMZ1Association": {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : {"Ref": "PublicRT"},
                "SubnetId" : {"Ref": "Public1"}
            }
        },
        "PublicRTDMZ2Association": {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : {"Ref": "PublicRT"},
                "SubnetId" : {"Ref": "Public2"}
            }
        },
        "DMZ2NatGW": {
            "Type" : "AWS::EC2::NatGateway",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt": ["NatEIP","AllocationId"]},
                "ConnectivityType" : "public",
                "SubnetId" : {"Ref": "Public2"},
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "Nat-Gateway"
                    }
                ]
            }
        },
        "NatEIP": {
            "Type" : "AWS::EC2::EIP",
            "DependsOn": "InternetGatewayAttachment",
            "Properties" : {
                "Domain" : "vpc",
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "Elastic-IP"
                    }
                ]
            }
        },
        "PrivateRT": {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref": "VPC"},
                "Tags" : [
                    {
                        "Key": "Name",
                        "Value": "Private-RT "
                    }
                ]

            }
        },
        "NatGatewayRoute": {
            "Type" : "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties" : {
                "NatGatewayId" : {"Ref": "DMZ2NatGW"},
                "RouteTableId" : {"Ref": "PrivateRT"},
                "DestinationCidrBlock" : "0.0.0.0/0" 
            }
        },
        "AppLayer1PrivateSubnetAssociation": {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : {"Ref": "PrivateRT"},
                "SubnetId" : {"Ref": "Private1"}
            }
        },
        "AppLayer2PrivateSubnetAssociation": {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : {"Ref": "PrivateRT"},
                "SubnetId" : {"Ref": "Private2"}
            }
        },
        "ALBASG": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Wordpress-ALB",
                "GroupName" : "LoadBalancer-SG",
                "VpcId" : {"Ref": "VPC"},
                "SecurityGroupIngress" : [ 
                    {
                        "CidrIp" : "0.0.0.0/0",
                        "FromPort" : 80,
                        "IpProtocol" : "tcp",
                        "ToPort" : 80
                    },
                    {
                        "CidrIp" : "0.0.0.0/0",
                        "FromPort" : 443,
                        "IpProtocol" : "tcp",
                        "ToPort" : 443
                    }
                 ],
                "Tags" : [ 
                    {
                        "Key": "Name",
                        "Value": "LoadBalancer-SG"
                    }
                 ]
                }
            },
            "BastionHostSG": {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                    "GroupDescription" : "Wordpress-Bastion-SG",
                    "GroupName" : "Bastion-SG",
                    "VpcId" : {"Ref": "VPC"},
                    "SecurityGroupIngress" : [ 
                        {
                            "CidrIp" : "0.0.0.0/0",
                            "FromPort" : 22,
                            "IpProtocol" : "tcp",
                            "ToPort" : 22
                        }
                     ],
                    "Tags" : [ 
                        {
                            "Key": "Name",
                            "Value": "BastionHost-SG"
                        }
                     ]
                    }
                },
                "AppServerSG": {
                    "Type" : "AWS::EC2::SecurityGroup",
                    "Properties" : {
                        "GroupDescription" : "AppLayer-SG",
                        "GroupName" : "Wordpress-SG",
                        "VpcId" : {"Ref": "VPC"},
                        "SecurityGroupIngress" : [ 
                            {
                                "SourceSecurityGroupId" : {"Ref": "BastionHostSG"},
                                "FromPort" : 22,
                                "IpProtocol" : "tcp",
                                "ToPort" : 22
                            },
                            {
                                "SourceSecurityGroupId" :{"Ref": "ALBASG"},
                                "FromPort" : 80,
                                "IpProtocol" : "tcp",
                                "ToPort" : 80
                            }
                         ],
                        "Tags" : [ 
                            {
                                "Key": "Name",
                                "Value": "AppLayer-SG"
                            }
                         ]
                        }
                    },
                "DMZPublicNACL": {
                    "Type" : "AWS::EC2::NetworkAcl",
                    "Properties" : {
                        "Tags" : [{
                            "Key": "Name",
                            "Value": "DMZ-Public-Subnet-NACL"
                        } ],
                        "VpcId" : {"Ref": "VPC"}
                }
            },
            "DMZ1NACLAssociation": {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "DependsOn": "DMZPublicNACL",
                "Properties" : {
                    "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                    "SubnetId" : {"Ref": "Public1"}
                    }
                },
            "DMZ2NACLAssociation": {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "DependsOn": "DMZPublicNACL",
                "Properties" : {
                    "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                    "SubnetId" : {"Ref": "Public2"}
                    }
                },
            "DMZPublicSubnetNACLIngress100": {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "CidrBlock" : "0.0.0.0/0",
                    "Egress" : false,
                    "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                    "PortRange" : {"From": "22", "To": "22"},
                    "Protocol" : 6,
                    "RuleAction" : "allow",
                    "RuleNumber" : 100
                    }
                },
            "DMZPublicSubnetNACLIngress110": {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "CidrBlock" : "0.0.0.0/0",
                    "Egress" : false,
                    "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                    "PortRange" : {"From": "80", "To": "80"},
                    "Protocol" : 6,
                    "RuleAction" : "allow",
                    "RuleNumber" : 110
                    }
                },
            "DMZPublicSubnetNACLIngress120": {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "CidrBlock" : "0.0.0.0/0",
                    "Egress" : false,
                    "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                    "PortRange" : {"From": "443", "To": "443"},
                    "Protocol" : 6,
                    "RuleAction" : "allow",
                    "RuleNumber" : 120
                    }
                },
                "DMZPublicSubnetNACLIngress130": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "0.0.0.0/0",
                        "Egress" : false,
                        "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                        "PortRange" : {"From": "1024", "To": "65535"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 130
                        }
                    },
                "DMZPublicSubnetNACLEgress100": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "0.0.0.0/0",
                        "Egress" : true,
                        "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                        "PortRange" : {"From": "22", "To": "22"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 100
                        }
                    },
                "DMZPublicSubnetNACLEgress110": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "0.0.0.0/0",
                        "Egress" : true,
                        "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                        "PortRange" : {"From": "80", "To": "80"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 110
                        }
                    },
                "DMZPublicSubnetNACLEgress120": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "0.0.0.0/0",
                        "Egress" : true,
                        "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                        "PortRange" : {"From": "443", "To": "443"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 120
                        }
                    },
                "DMZPublicSubnetNACLEgress130": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "0.0.0.0/0",
                        "Egress" : true,
                        "NetworkAclId" : {"Ref": "DMZPublicNACL"},
                        "PortRange" : {"From": "1024", "To": "65535"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 130
                    }
                },
                "AppLayerPrivateNACL": {
                    "Type" : "AWS::EC2::NetworkAcl",
                    "Properties" : {
                        "Tags" : [{
                            "Key": "Name",
                            "Value": "DMZ-Private-Subnet-NACL"
                        } ],
                        "VpcId" : {"Ref": "VPC"}
                     }
                 },
                 "AppLayer1NACLAssociation": {
                    "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                    "DependsOn": "AppLayerPrivateNACL",
                    "Properties" : {
                        "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                        "SubnetId" : {"Ref": "Private1"}
                        }
                    },
                "AppLayer2NACLAssociation": {
                    "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                    "DependsOn": "AppLayerPrivateNACL",
                    "Properties" : {
                        "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                        "SubnetId" : {"Ref": "Private2"}
                        }
                    },
                "AppLayerPrivateSubnetNACLIngress100": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "10.0.0.0/16",
                        "Egress" : false,
                        "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                        "PortRange" : {"From": "22", "To": "22"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 100
                        }
                    },
                "AppLayerPrivateSubnetNACLIngress110": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "CidrBlock" : "10.0.0.0/16",
                        "Egress" : false,
                        "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                        "PortRange" : {"From": "80", "To": "80"},
                        "Protocol" : 6,
                        "RuleAction" : "allow",
                        "RuleNumber" : 110
                        }
                    },
        "AppLayerPrivateSubnetNACLIngress120": {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "Egress" : false,
                "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                "PortRange" : {"From": "443", "To": "443"},
                "Protocol" : 6,
                "RuleAction" : "allow",
                "RuleNumber" : 120
                }
            },
        "AppLayerPrivateSubnetNACLIngress130": {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "CidrBlock" : "0.0.0.0/0",
                "Egress" : false,
                "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                "PortRange" : {"From": "1024", "To": "65535"},
                "Protocol" : 6,
                "RuleAction" : "allow",
                "RuleNumber" : 130
                }
            },
        "AppLayerPrivateSubnetNACLEgress100": {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "CidrBlock" : "0.0.0.0/0",
                "Egress" : true,
                "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                "PortRange" : {"From": "22", "To": "22"},
                "Protocol" : 6,
                "RuleAction" : "allow",
                "RuleNumber" : 100
                }
            },
        "AppLayerPrivateSubnetNACLEgress110": {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "CidrBlock" : "0.0.0.0/0",
                "Egress" : true,
                "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                "PortRange" : {"From": "80", "To": "80"},
                "Protocol" : 6,
                "RuleAction" : "allow",
                "RuleNumber" : 110
                }
            },
        "AppLayerPrivateSubnetNACLEgress120": {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "CidrBlock" : "0.0.0.0/0",
                "Egress" : true,
                "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
                "PortRange" : {"From": "443", "To": "443"},
                "Protocol" : 6,
                "RuleAction" : "allow",
                "RuleNumber" : 120
                }
            },
    "AppLayerPrivateSubnetNACLEgress130": {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "Egress" : true,
            "NetworkAclId" : {"Ref": "AppLayerPrivateNACL"},
            "PortRange" : {"From": "1024", "To": "65535"},
            "Protocol" : 6,
            "RuleAction" : "allow",
            "RuleNumber" : 130
            }
        },
        "ALB": {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "IpAddressType" : "ipv4",
                "Name" : "Application-Wordpress",
                "Scheme" : "internet-facing",
                "SecurityGroups" : [{"Ref": "ALBASG"}],
                "Subnets" : [ {"Ref": "Public1"}, {"Ref": "Public2"} ],
                "Type" : "application"
                }
            },
        "Listener": {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [ 
                    {
                        "Type": "forward",
                        "TargetGroupArn" : {"Ref": "TargetGroup"}
                    }
                 ],
                "LoadBalancerArn" : {"Ref": "ALB"} ,
                "Port" : 80,
                "Protocol" : "HTTP"
                }
            },
        "TargetGroup": {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "HealthCheckEnabled" : true,
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/",
                "HealthCheckPort" : "80",
                "HealthCheckProtocol" : "HTTP",
                "HealthyThresholdCount" : 2,
                "Name" : "TargetGroup-Wordpress",
                "Port" : 80,
                "Protocol" : "HTTP",
                "Tags" : [ 
                    {
                        "Key": "Name",
                        "Value": "TargetGroup-Wordpress"
                    }
                 ],
                "TargetType" : "instance",
                "UnhealthyThresholdCount" : 2,
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "LaunchCongiguration": {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "AssociatePublicIpAddress" : false,
                "ImageId" : "ami-089a545a9ed9893b6",
                "InstanceMonitoring" : true,
                "InstanceType" : "t2.micro",
                "KeyName" : {"Ref": "WebServerKey"},
                "PlacementTenancy" : "default",
                "SecurityGroups" : [ {
                    "Ref": "AppServerSG"
                } ],
                "UserData" : {
                    "Fn::Base64": {
                        "Fn::Join" : [
                            "",
                            [
                            "#!/bin/bash\n",
                            "yum update -y\n",
                            "wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n",
                            "yum localinstall -y mysql57-community-release-el7-8.noarch.rpm\n",
                            "yum install -y mysql-community-server\n",
                            "yum install -y httpd php php-mysqlnd git\n",
                            "cd /var/www/html\n",
                            "wget https://wordpress.org/wordpress-5.1.1.tar.gz\n",
                            "tar -xzf wordpress-5.1.1.tar.gz\n",
                            "cp wordpress/wp-config-sample.php wp-config.php\n",
                            "echo '<?php phpinfo(); ?>' > /var/www/html/phpinfo.php\n",
                            "echo 'Hello World' > /var/www/html/index.html\n",
                            "groupadd www\n",
                            "usermod -aG www ec2-user\n",
                            "chown -R root:www /var/www\n",
                            "service httpd start\n",
                            "chkconfig httpd on\n",
                            "service mysqld start\n",
                            "chkconfig mysqld on\n",
                            "service httpd restart\n",
                            "service mysqld restart"
                            ]
                        ]
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "ALB",
            "Properties" : {
                "AutoScalingGroupName" : "AppLayer-ASG",
                "Cooldown" : "300",
                "DesiredCapacity" : "3",
                "HealthCheckGracePeriod" : 300,
                "HealthCheckType" : "ELB",
                "LaunchConfigurationName" : {"Ref": "LaunchCongiguration"},
                "MaxSize" : "5",
                "MinSize" : "2",
                "Tags" : [{"PropagateAtLaunch": true, "Key": "Name","Value": "ASG-wordpress"}],
                "TargetGroupARNs" : [{"Ref": "TargetGroup" }],
                "VPCZoneIdentifier" : [ {"Ref": "Private1"},{"Ref": "Private2"}]
                }
            },
            "BastionInstance": {
                "Type" : "AWS::EC2::Instance",
                "Properties" : {
                    "ImageId" : "ami-089a545a9ed9893b6",
                    "InstanceType" : "t2.micro",
                    "KeyName" : {"Ref": "WebServerKey"},
                    "NetworkInterfaces" : [ 
                        {
                            "GroupSet": [
                                {"Ref":"BastionHostSG"}
                            ],
                            "AssociatePublicIpAddress": true,
                            "DeviceIndex": "0",
                            "DeleteOnTermination": true,
                            "SubnetId": {"Ref":"Public1"}
                        }
                     ],
                    "Tags" : [ 
                        {
                            "Key": "Name",
                            "Value": "Bastion"
                        }
                     ]
                    }
                },
                "ASGPolicy": {
                    "Type" : "AWS::AutoScaling::ScalingPolicy",
                    "Properties" : {
                        "AdjustmentType" : "PercentChangeInCapacity",
                        "AutoScalingGroupName" : {"Ref": "AutoScalingGroup"},
                        "PolicyType" : "TargetTrackingScaling",
                        "TargetTrackingConfiguration" : {
                            "TargetValue": 40.0,
                            "PredefinedMetricSpecification": {
                                "PredefinedMetricType": "ASGAverageCPUUtilization"
                            }
                        }
                        }
                    }
                    
                }
                
        }
            